{"version":3,"sources":["styles/Sidebar.js","components/ToReadRow.js","components/ToRead.js","components/CurrentlyReadingRow.js","components/CurrentlyReading.js","components/DoneReading.js","containers/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["StyledButton","styled","button","StyledUl","ul","RemoveButton","MoveButton","sidebarBlock","height","innerBlock","maxWidth","minHeight","maxHeight","content","overflow","width","toReadH1","display","verticalAlign","toReadHeader","position","right","top","ReadRow","item","onMigrate","onRemove","onUpdate","onClick","id","contentEditable","onBlur","field","document","getElementById","textContent","onKeyPress","e","charCode","preventDefault","style","outline","name","phrase","num","Math","floor","random","textGenerator","ToRead","list","setList","current","setCurrent","updateList","newName","newItem","newList","map","element","AddButton","type","length","blankItem","uuidv4","start","end","concat","handleRemove","filter","moveToCurrent","today","Date","CurrentlyReadingRow","handleMove","CurrentlyReading","finished","setFinished","removeItem","moveToFinished","newFinishedList","bottom","left","opacity","DoneReading","arr","StyledBlock","h3","index","color","replaceAll","Sidebar","toRead","setToRead","toReadList","currentList","doneReadingList","appcss","sidebarcss","padding","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.48c8d9cc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledButton = styled.button`\n    width: 120px;\n    height: 45px;\n    color: black;\n    font-size: 15px;\n    font-weight: bold;\n    border-width: 3px;\n    border-color: black;\n    background-color: Transparent;\n    display: table-cell;\n    vertical-align: middle;\n    transition: all 0.2s linear;\n\n    &:hover {\n        color: white;\n        background-color: black;\n    }\n`\n\nexport const StyledUl = styled.ul`\n    list-style-type: none; \n    padding:0px; \n    margin-left: 1em;\n`\n\nexport const RemoveButton = styled.button`\n    position: relative;\n    border: none;\n    padding: 0px 15px 0px 0px;\n    background: none;\n    width: 30px;\n    cursor: pointer;\n    margin: 4px;\n    font-size: 21px;\n    background-clip:content-box;\n\n\n    &::before {\n        content: \"•\";\n    }\n\n    &:hover {\n        &::before {\n            content: \"✕\";\n        }\n    }\n`\n\nexport const MoveButton = styled.button`\n    color: white;\n    border: none;\n    background-color: black;\n    vertical-align: middle;\n    transition: all 0.5s linear;\n    opacity: 0;\n\n    &:hover {\n        opacity: 1;\n    }\n`\n\n// Positioning\n\n// Sidebar block\nexport const sidebarBlock = {\n    height: '90vh',\n    // backgroundColor: \"green\",\n\n}\n\n// ToRead block ----->\nexport const innerBlock  = {\n    maxWidth: \"24rem\",\n    minHeight: \"10rem\",\n    maxHeight: \"33%\",\n    height: '100%',\n    // backgroundColor:\"red\",\n}\n\nexport const content = {\n    overflow: \"scroll\",\n    width:\"24rem\",\n    minHeight: '20vh',\n    maxHeight: \"20vh\",\n    // backgroundColor: 'purple',\n    // position: \"absolute\"\n}\n\nexport const toReadH1 = {\n    display: 'inline', \n    verticalAlign:'middle'\n}\n\nexport const toReadHeader = {\n    display: 'inline', \n    position:\"absolute\", \n    right:\"2rem\", top:\"1rem\",\n}\n\n// <-----","import { RemoveButton, MoveButton } from \"../styles/Sidebar\";\nimport styled from 'styled-components';\n\nconst ReadRow = ({ item, onMigrate, onRemove, onUpdate }) => {\n\n    function textGenerator() {\n        let num = Math.floor(Math.random() * 11);\n        let phrase;\n        if (num < 6) \n            phrase = 'start reading?';\n        else if (num >= 6 && num < 8) \n            phrase = 'u know u wanna :^)';\n        else if (num >= 8)\n            phrase = 'read me!'\n        return phrase;\n    }\n\n    function handleBlur() {\n        let field = document.getElementById(item.id).textContent;\n        if (field === 'Edit Me!' || field === '') onRemove(item.id);\n        else onUpdate(item, field);\n    }\n\n    function keyPress(e) {\n        if(e.charCode === 13) {\n            let field = document.getElementById(item.id).textContent;\n            onUpdate(item, field);\n            e.preventDefault();\n        }\n    }\n\n    function handleRemove() {\n        onRemove(item.id);\n    }\n\n    function handleMigrate() {\n        onMigrate(item);\n        onRemove(item.id);\n    }\n\n    return (\n        <div>\n            <RemoveButton onClick={handleRemove}/>\n            <span id={item.id}\n                    contentEditable\n                    onBlur={handleBlur}\n                    onKeyPress={keyPress}\n                    style={{outline: 'none'}}\n                >{item.name}</span>\n                \n                <MoveButton onClick={handleMigrate} >{textGenerator()}</MoveButton>\n        </div>\n    )\n}\n\nexport default ReadRow;","import React from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport Row from './ToReadRow'\nimport { StyledButton, StyledUl, innerBlock, content, toReadH1, toReadHeader } from '../styles/Sidebar'\n\nconst ToRead = ({ list, setList, current, setCurrent }) => {\n\n    function updateList(item, newName) {\n        const newItem = { ...item, name:newName };\n        const newList = list.map((element) => (\n            element.id === item.id ? newItem : element\n        ));\n        setList(newList);\n    }\n\n    const AddButton = () => {\n        function handleAdd() {\n            //check if no-book exists\n            if (list.length === 0);\n            // else if (list[list.length-1].name === 'Edit Me!') return;\n            //add new-book\n            const blankItem = {\n                name: 'Edit Me!',\n                id: uuidv4(),\n                start: null,\n                end: null\n            }\n            const newList = list.concat(blankItem)\n            setList(newList)\n            \n        }\n\n        return (\n            <StyledButton type=\"button\" onClick={handleAdd}>\n                Add Book\n            </StyledButton>\n        )\n    }\n\n    function handleRemove(id) {\n        const newList = list.filter((element) => (\n            element.id === id ? false : true\n        ))\n        setList(newList)\n    }\n\n    // helper for moving toread book to currentlyreading; starts the date as time clicked\n    function moveToCurrent(item) {\n        let today = new Date();\n        const newList = current.concat({\n            ...item,\n            start: {today}\n        })\n        setCurrent(newList)\n    }\n\n\n    return (\n        <div>\n        <div style={innerBlock}>\n            <h1 style={toReadH1}>To-Read:</h1>      \n            <p style={toReadHeader}><AddButton/></p>\n            <div style={content}>\n                <StyledUl>\n                    {list.map((item) => (\n                        <li key={item.id}>\n                            <Row \n                                item={item} \n                                onMigrate={moveToCurrent}\n                                onRemove={handleRemove}\n                                onUpdate={updateList}\n                            />\n                        </li>\n                    ))}\n                </StyledUl>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default ToRead;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    font-size: 15px;\n    border-width: 2px;\n    border-color: black;\n    background-color: white;\n    padding: 2px 7px 2px 7px;\n    transition: all 0.5s ease;\n    margin: 0.5rem;\n    &:hover {\n        box-shadow: 5px 5px;\n        margin: 5px;\n    }\n\n`\n\n\n\nconst CurrentlyReadingRow = ({ id, item, handleMove, handleRemove }) => {\n\n    function handleMigrate() {\n        handleMove(item);\n        handleRemove(item.id);\n    };\n\n    return (\n            <StyledButton id={id} onClick={handleMigrate} >{item.name}</StyledButton>\n    );\n}\n\nexport default CurrentlyReadingRow;","import React from 'react';\nimport Row from './CurrentlyReadingRow';\nimport { innerBlock, content } from '../styles/Sidebar';\n\nconst CurrentlyReading = ({ list, setList, finished, setFinished }) => {\n\n    function removeItem(id) {\n        const newList = list.filter((item) => (\n            item.id === id ? false : true\n        ));\n        setList(newList);\n    }\n\n    function moveToFinished(item) {\n        const newItem = { ...item, end:new Date() };\n        const newFinishedList = finished.concat( newItem );\n        setFinished(newFinishedList);\n    }\n\n    return(\n        <div style={innerBlock}>\n            <h1>Currently Reading:</h1>\n            <div style={{...content, width:\"17rem\"}}>\n            {list.map((item) => (\n                        <Row \n                            id={item.id}\n                            item={item} \n                            handleMove={moveToFinished}\n                            handleRemove={removeItem}\n                        />\n                ))}\n            \n            </div>\n            <div style={{position: \"relative\", bottom: \"0\", left:\"12rem\", opacity:0.24}}>finished reading? :P</div><br/>\n        </div>\n    );\n}\n\nexport default CurrentlyReading;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport { innerBlock } from '../styles/Sidebar';\n\n\nconst DoneReading = ({ list }) => {\n    const arr = ['black','black', 'red', 'black', 'black'];\n\n    const StyledBlock = styled.h3`\n        font-weight: 700;\n        word-wrap: break-word;\n        display: inline;\n        width: 100px;\n        max-width: 100px;\n    `\n\n    return (\n        <div style={innerBlock}>\n            <h1>Done Reading:</h1>\n            <div>\n            {list.map((item, index) => (\n                    <StyledBlock style={{color:arr[index%6]}}>\n                        {item.name.replaceAll(/\\s/g,'')}\n                    </StyledBlock>\n                )\n            )}\n        </div>\n        </div>\n    )\n}\n\nexport default DoneReading;","import React from \"react\";\nimport ToRead from \"../components/ToRead\";\nimport CurrentlyReading from \"../components/CurrentlyReading\";\nimport DoneReading from \"../components/DoneReading\";\nimport { sidebarBlock } from \"../styles/Sidebar\"\n\n\nconst Sidebar = ({ toRead, current, finished, setToRead, setCurrent, setFinished }) => {\n\n    return (\n        <div style={sidebarBlock}>\n            <ToRead\n                list={toRead} \n                setList={setToRead}\n                current={current}\n                setCurrent={setCurrent}\n            />\n            <CurrentlyReading\n                list={current}\n                setList={setCurrent}\n                finished={finished}\n                setFinished={setFinished}\n            />\n            <DoneReading\n                list={finished}\n            />\n        </div>\n    )\n}\n\nexport default Sidebar","import React, { useState } from 'react'\nimport Sidebar from './containers/Sidebar'\n\nconst toReadList = [ \n  { \n      id: 'a',\n      name: 'Moby Dick',\n      start: null,\n      end: null\n  },\n  {\n      id: 'b',\n      name: 'Emma',\n      start: null,\n      end: null\n  },\n  {\n      id: 'c',\n      name: 'The Hungry Caterpillar',\n      start: null,\n      end: null\n  }\n];\n\nconst currentList = [\n  {\n      id: 'd',\n      name: 'Harry Potter',\n      start: Date(\"2020-01-12\"),\n      end: null\n  }\n];\n\nconst doneReadingList = [\n  {\n      id: 'e',\n      name: 'Atomic Habits',\n      start: new Date(\"2020-12-01\"),\n      end: new Date(\"2020-12-31\")\n  }\n];\n\nfunction App() {\n  const [toRead, setToRead] = useState(toReadList);\n  const [current, setCurrent] = useState(currentList);\n  const [finished, setFinished] = useState(doneReadingList);\n\n\n  return (\n    <div style={appcss}>\n    <div style={sidebarcss}>\n      <Sidebar\n        toRead={toRead}\n        current={current}\n        finished={finished}\n        setToRead={setToRead}\n        setCurrent={setCurrent}\n        setFinished={setFinished}\n    />\n    </div>\n    </div>\n  );\n}\n\nconst appcss = {\n}\n\nconst sidebarcss = {\n  position: 'absolute',\n  right: '2rem',\n  padding: \"2rem\"\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}