{"version":3,"sources":["styles/ToReadRow.js","components/ToReadRow.js","components/ToRead.js","components/CurrentlyReadingRow.js","components/CurrentlyReading.js","components/DoneReading.js","containers/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["StyledButton","styled","button","RemoveButton","MoveButton","ReadRow","item","onMigrate","onRemove","onUpdate","onClick","id","contentEditable","onBlur","field","document","getElementById","textContent","style","outline","name","phrase","num","Math","floor","random","textGenerator","buttoncss","position","display","verticalAlign","left","bulletStyle","listStyleType","padding","listStylePosition","marginLeft","ToRead","list","setList","current","setCurrent","updateList","newName","newItem","newList","map","element","AddButton","type","length","blankItem","uuidv4","start","end","concat","handleRemove","filter","moveToCurrent","today","Date","className","CurrentlyReadingRow","div","span","handleMove","CurrentlyReading","finished","setFinished","removeItem","moveToFinished","newFinishedList","maxWidth","opacity","DoneReading","arr","StyledBlock","h3","index","color","replaceAll","Sidebar","toRead","setToRead","toReadList","currentList","doneReadingList","appcss","sidebarcss","right","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b452e646.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const StyledButton = styled.button`\nwidth: 120px;\nheight: 45px;\ncolor: black;\nfont-size: 15px;\nfont-weight: bold;\nborder-width: 3px;\nborder-color: black;\nbackground-color: white;\ndisplay: table-cell;\nvertical-align: middle;\ntransition: all 0.2s linear;\n\n&:hover {\n    color: white;\n    background-color: black;\n}\n`\n\n\nexport const RemoveButton = styled.button`\n    position: relative;\n    border: none;\n    padding: 0px 15px 0px 0px;\n    background: none;\n    width: 30px;\n    cursor: pointer;\n    margin: 4px;\n    font-size: 21px;\n    background-clip:content-box;\n\n\n    &::before {\n        content: \"•\";\n    }\n\n    &:hover {\n        &::before {\n            content: \"✕\";\n        }\n    }\n`\n\nexport const MoveButton = styled.button`\n    color: white;\n    border: none;\n    background-color: black;\n    vertical-align: middle;\n    transition: all 0.5s linear;\n    opacity: 0;\n\n    &:hover {\n        opacity: 1;\n    }\n`\n","import { RemoveButton, MoveButton } from \"../styles/ToReadRow\";\nimport styled from 'styled-components';\n\nconst ReadRow = ({ item, onMigrate, onRemove, onUpdate }) => {\n\n    function handleBlur() {\n        let field = document.getElementById(item.id).textContent;\n        if (field === 'Click Me!' || field === '') onRemove(item.id);\n        else onUpdate(item, field);\n    }\n\n    // function handleEnter(e) {\n    //     if (e.key === 'Enter') onUpdate(item, e.target.value);\n    // }\n\n    function handleRemove() {\n        onRemove(item.id);\n    }\n\n    function handleMigrate() {\n        onMigrate(item);\n        onRemove(item.id);\n    }\n\n    function textGenerator() {\n        let num = Math.floor(Math.random() * 11);\n        let phrase;\n        if (num < 6) \n            phrase = 'start reading?';\n        else if (num >= 6 && num < 8) \n            phrase = 'u know u wanna :^)';\n        else if (num >= 8)\n            phrase = 'read me!'\n        return phrase;\n    }\n\n    return (\n        <div>\n            <RemoveButton onClick={handleRemove}/>\n            <span id={item.id}\n                    contentEditable\n                    onBlur={handleBlur}\n                    style={{outline: 'none'}}\n                >{item.name}</span>\n                \n                <MoveButton onClick={handleMigrate} >{textGenerator()}</MoveButton>\n        </div>\n    )\n}\n\nexport default ReadRow;","import React, { useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport Row from './ToReadRow'\nimport { StyledButton } from '../styles/ToReadRow'\n\nconst buttoncss = {\n    position: 'relative',\n    display: 'inline',\n    verticalAlign: 'middle',\n    left: '25px'\n}\n\nconst bulletStyle = {\n    listStyleType:\"none\", \n    padding:'0px', \n    listStylePosition:'outside',\n    marginLeft: '1em'\n}\n\nconst ToRead = ({ list, setList, current, setCurrent }) => {\n\n    function updateList(item, newName) {\n        const newItem = { ...item, name:newName };\n        const newList = list.map((element) => (\n            element.id === item.id ? newItem : element\n        ));\n        setList(newList);\n    }\n\n    const AddButton = () => {\n        function handleAdd() {\n            //check if no-book exists\n            if (list.length === 0);\n            else if (list[list.length-1].name === 'Click Me!') return;\n            //add new-book\n            const blankItem = {\n                name: 'Click Me!',\n                id: uuidv4(),\n                start: null,\n                end: null\n            }\n            const newList = list.concat(blankItem)\n            setList(newList)\n            \n        }\n\n        return (\n            <StyledButton type=\"button\" onClick={handleAdd}>\n                Add Book\n            </StyledButton>\n        )\n    }\n\n    function handleRemove(id) {\n        const newList = list.filter((element) => (\n            element.id === id ? false : true\n        ))\n        setList(newList)\n    }\n\n    // helper for moving toread book to currentlyreading; starts the date as time clicked\n    function moveToCurrent(item) {\n        let today = new Date();\n        const newList = current.concat({\n            ...item,\n            start: {today}\n        })\n        setCurrent(newList)\n    }\n\n\n    return (\n        <div>\n            <h1 style={{display: 'inline-block', verticalAlign:'middle'}}>To-Read:</h1>\n            <p style={buttoncss}><AddButton/></p>\n                <div className='toRead'>\n                <ul style={bulletStyle} >\n                    { list.map((item) => (\n                            <li key={item.id}>\n                                <Row \n                                    item={item} \n                                    onMigrate={moveToCurrent}\n                                    onRemove={handleRemove}\n                                    onUpdate={updateList}\n                                />\n                            </li>\n                    ))}\n                </ul>\n                </div>\n        </div>\n    )\n}\n\nexport default ToRead;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    font-size: 15px;\n    border-width: 2px;\n    border-color: black;\n    background-color: white;\n    padding: 2px 7px 2px 7px;\n    transition: all 0.5s ease;\n    margin: 2px 0px;\n    &:hover {\n        box-shadow: 5px 5px;\n        margin: 5px;\n    }\n\n`\nconst StyledDiv = styled.div`\n    button:focus + span {\n        opacity: 0.6;\n    }\n`\nconst StyledSpan = styled.span`\nbutton:focus + span {\n    opacity: 0.6;\n}\n`\n\n\nconst CurrentlyReadingRow = ({ item, handleMove, handleRemove }) => {\n\n    function handleMigrate() {\n        handleMove(item);\n        handleRemove(item.id);\n    };\n\n    return (\n            <StyledButton id=\"a\" onClick={handleMigrate} >{item.name}</StyledButton>\n    );\n}\n\nexport default CurrentlyReadingRow;","import React, { useState } from 'react';\nimport Row from './CurrentlyReadingRow';\n\nconst CurrentlyReading = ({ list, setList, finished, setFinished }) => {\n\n    function removeItem(id) {\n        const newList = list.filter((item) => (\n            item.id === id ? false : true\n        ));\n        setList(newList);\n    }\n\n    function moveToFinished(item) {\n        const newItem = { ...item, end:new Date() };\n        const newFinishedList = finished.concat( newItem );\n        setFinished(newFinishedList);\n    }\n\n    return(\n        <div style={{maxWidth:'280px'}}>\n            <h1>Currently Reading:</h1>\n            <ul style={{listStyleType:\"none\"}}>\n                { list.map((item) => (\n                    <li key={item.id}>\n                        <Row \n                            item={item} \n                            handleMove={moveToFinished}\n                            handleRemove={removeItem}\n                        />\n                    </li>\n                ))}\n            </ul>\n            <div style={{padding: '0px 0px 0px 20%', opacity:0.24}}>finished reading? :P</div><br/>\n        </div>\n    );\n}\n\nexport default CurrentlyReading;","import React, { useState } from \"react\";\nimport styled from 'styled-components';\n\nconst DoneReading = ({ list }) => {\n    const arr = ['black','black', 'red', 'black', 'black'];\n\n    const StyledBlock = styled.h3`\n        font-weight: 700;\n        word-wrap: break-word;\n        display: inline;\n        width: 100px;\n        max-width: 100px;\n    `\n\n    return (\n        <div style={{maxWidth:'280px'}}>\n            <h1>Done Reading:</h1>\n            {list.map((item, index) => (\n                    <StyledBlock style={{color:arr[index%6]}}>\n                        {item.name.replaceAll(/\\s/g,'')}\n                    </StyledBlock>\n                )\n            )}\n        </div>\n    )\n}\n\nexport default DoneReading;","import React from \"react\";\nimport ToRead from \"../components/ToRead\";\nimport CurrentlyReading from \"../components/CurrentlyReading\";\nimport DoneReading from \"../components/DoneReading\";\n\n\nconst Sidebar = ({ toRead, current, finished, setToRead, setCurrent, setFinished }) => {\n\n    return (\n        <div>\n            <ToRead \n                list={toRead} \n                setList={setToRead}\n                current={current}\n                setCurrent={setCurrent}\n            />\n            <CurrentlyReading\n                list={current}\n                setList={setCurrent}\n                finished={finished}\n                setFinished={setFinished}\n            />\n            <DoneReading\n                list={finished}\n            />\n        </div>\n    )\n}\n\nexport default Sidebar","import React, { useState } from 'react'\nimport Sidebar from './containers/Sidebar'\n\nconst toReadList = [ \n  { \n      id: 'a',\n      name: 'Moby Dick',\n      start: null,\n      end: null\n  },\n  {\n      id: 'b',\n      name: 'Emma',\n      start: null,\n      end: null\n  },\n  {\n      id: 'c',\n      name: 'The Hungry Caterpillar',\n      start: null,\n      end: null\n  }\n];\n\nconst currentList = [\n  {\n      id: 'd',\n      name: 'Harry Potter',\n      start: Date(\"2020-01-12\"),\n      end: null\n  }\n];\n\nconst doneReadingList = [\n  {\n      id: 'e',\n      name: 'Atomic Habits',\n      start: new Date(\"2020-12-01\"),\n      end: new Date(\"2020-12-31\")\n  }\n];\n\nfunction App() {\n  const [toRead, setToRead] = useState(toReadList);\n  const [current, setCurrent] = useState(currentList);\n  const [finished, setFinished] = useState(doneReadingList);\n\n\n  return (\n    <div style={appcss}>\n    <div style={sidebarcss}>\n      <Sidebar\n        toRead={toRead}\n        current={current}\n        finished={finished}\n        setToRead={setToRead}\n        setCurrent={setCurrent}\n        setFinished={setFinished}\n    />\n    </div>\n    </div>\n  );\n}\n\nconst appcss = {\n}\n\nconst sidebarcss = {\n  // marginLeft: '60%',\n  // marginRight: '10px',\n  // minWidth: '400px',\n  position: 'absolute',\n  right: '30px',\n  padding: '30px'\n  // left: '80%'\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}